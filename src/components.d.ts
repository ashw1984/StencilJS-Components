/**
 * This is an autogenerated file created by the Stencil build process.
 * It contains typing information for all components that exist in this project
 * and imports for stencil collections that might be configured in your stencil.config.js file
 */

import '@stencil/core';

declare global {
  namespace JSX {
    interface Element {}
    export interface IntrinsicElements {}
  }
  namespace JSXElements {}

  interface HTMLStencilElement extends HTMLElement {
    componentOnReady(): Promise<this>;
    componentOnReady(done: (ele?: this) => void): void;

    forceUpdate(): void;
  }

  interface HTMLAttributes {}
}

import '@stencil/router';

import {
  MatchResults,
} from '@stencil/router';

declare global {
  interface HTMLAppHomeElement extends HTMLStencilElement {

  }
  var HTMLAppHomeElement: {
    prototype: HTMLAppHomeElement;
    new (): HTMLAppHomeElement;
  };
  interface HTMLElementTagNameMap {
    'app-home': HTMLAppHomeElement;
  }
  interface ElementTagNameMap {
    'app-home': HTMLAppHomeElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'app-home': JSXElements.AppHomeAttributes;
    }
  }
  namespace JSXElements {
    export interface AppHomeAttributes extends HTMLAttributes {

    }
  }
}


declare global {
  interface HTMLAppProfileElement extends HTMLStencilElement {
    'match': MatchResults;
  }
  var HTMLAppProfileElement: {
    prototype: HTMLAppProfileElement;
    new (): HTMLAppProfileElement;
  };
  interface HTMLElementTagNameMap {
    'app-profile': HTMLAppProfileElement;
  }
  interface ElementTagNameMap {
    'app-profile': HTMLAppProfileElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'app-profile': JSXElements.AppProfileAttributes;
    }
  }
  namespace JSXElements {
    export interface AppProfileAttributes extends HTMLAttributes {
      'match'?: MatchResults;
    }
  }
}


declare global {
  interface HTMLMyAppElement extends HTMLStencilElement {

  }
  var HTMLMyAppElement: {
    prototype: HTMLMyAppElement;
    new (): HTMLMyAppElement;
  };
  interface HTMLElementTagNameMap {
    'my-app': HTMLMyAppElement;
  }
  interface ElementTagNameMap {
    'my-app': HTMLMyAppElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'my-app': JSXElements.MyAppAttributes;
    }
  }
  namespace JSXElements {
    export interface MyAppAttributes extends HTMLAttributes {

    }
  }
}


declare global {
  interface HTMLSdiTriangleElement extends HTMLStencilElement {
    'blueGreenFadeName': string;
    'blueGreenFadeURL': string;
    'blueGreenMixHex': string;
    'blueGreenMixOpacity': string;
    'blueHex': string;
    'circleRadius': number;
    'corners': Array<{"X","Y"}>;
    'greenHex': string;
    'plotArray': Array<{"X","Y","Name"}>;
    'recordArray': Array<{"Blue","Green","Red","Name"}>;
    'redFadeEndHex': string;
    'redFadeEndOpacity': string;
    'redFadeName': string;
    'redFadeURL': string;
    'redHex': string;
  }
  var HTMLSdiTriangleElement: {
    prototype: HTMLSdiTriangleElement;
    new (): HTMLSdiTriangleElement;
  };
  interface HTMLElementTagNameMap {
    'sdi-triangle': HTMLSdiTriangleElement;
  }
  interface ElementTagNameMap {
    'sdi-triangle': HTMLSdiTriangleElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'sdi-triangle': JSXElements.SdiTriangleAttributes;
    }
  }
  namespace JSXElements {
    export interface SdiTriangleAttributes extends HTMLAttributes {
      'blueGreenFadeName'?: string;
      'blueGreenFadeURL'?: string;
      'blueGreenMixHex'?: string;
      'blueGreenMixOpacity'?: string;
      'blueHex'?: string;
      'circleRadius'?: number;
      'corners'?: Array<{"X","Y"}>;
      'greenHex'?: string;
      'plotArray'?: Array<{"X","Y","Name"}>;
      'recordArray'?: Array<{"Blue","Green","Red","Name"}>;
      'redFadeEndHex'?: string;
      'redFadeEndOpacity'?: string;
      'redFadeName'?: string;
      'redFadeURL'?: string;
      'redHex'?: string;
    }
  }
}

declare global { namespace JSX { interface StencilJSX {} } }
